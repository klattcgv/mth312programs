import random

import numpy as np
import sympy as sy
import secrets
import math
import string

p=16*10**120+61483
g=8*10**120+30742
b = random.randint(1,p)
B = pow(g,b,p)
#B=11680341525417660816566326294409457765726992459164744711955990104254749684807762388292337143669412573528292551614769529120
public_key=(p,g,B)
def string2num(instring: str, alphabet: str=string.printable):
  """
  Given a string (and optionally an alphabet), converts the string into a single number.
  :instring str: Input string
  :alphabet str: (Optional) an alphabet, default:string.printable
  :returns int:
  """
  mynum=0
  for j in instring:
    mynum=len(alphabet)*mynum+alphabet.index(j)
  return mynum

def encode(message: str, modulus: int=p,alphabet: str=string.printable):
    """
    Given a string (optional modulus, optional alphabet), returns an
    encoding of the string as a list of numbers in the range 0 to modulus-1
    created from the alphbet. The default modulus is 16*10**120+6143 and
    the default alphabet is string.printable.
    :message str: The message string.
    :modulus int: The modulus (Optional. Default 16*10**120+6143)
    :alphabet str: The alphabet for encoding (Optional. Default string.printable)
    """
    n=string2num(message,alphabet)

    nlist=[]
    while n>0:
        nlist+=[n%modulus]
        n=n//modulus
    return nlist

def num2string(number: int, alphabet: str = string.printable):
    base = len(alphabet)
    plaintext = ''
    while number > 0:
        number, index = divmod(number, base)
        plaintext = alphabet[index] + plaintext
    return plaintext

def decode(nlist, modulus: int=p, alphabet: str=string.printable):
    decoded_message = ""
    n = 0

    for num in reversed(nlist):
        n = n * modulus + num

    decoded_message = num2string(n)

    return decoded_message

def nonce(modulus=16*10**120+61483):
    return secrets.randbelow(modulus)

encode('The FitnessGram Pacer Test is a multi-stage aerobic capacity test that progressively gets more difficult as it continues.')

def encipher(message:str, key=public_key):
  '''
  Encode and encrypt a message using the Elgamal Cryptosystem.
  :param message: A string containing the message to be encrypted.
  :param key: A triple, (p, g, B) containing the key to be used.
              key[0] is the modulus (a prime)
              key[1] is a primitive root (or generator) modulo p
              key[2] is the number generated by the recipient.
  :return: (enciphered_list, hint)
  '''
  # You would obviously need to change all of these.
  r=nonce(key[0])
  enciphered_list=[]
  hint=0

  hint = pow(g,r,key[0])
  encoded_message = encode(message)

  enciphered_list = [(number*(pow(key[2],r,key[0])))%key[0] for number in encoded_message]

  return enciphered_list,hint

def decipher(enciphered_list, c,key=public_key):
    deciphered_list = [(number*(pow(c,(key[0]-1-b),key[0])))%key[0] for number in enciphered_list]
    decoded_message = decode(deciphered_list)

    return decoded_message

ciphertext,hint = encipher('The FitnessGram Pacer Test is a multi-stage aerobic capacity test that progressively gets more difficult as it continues.')
print("Ciphertext: ",ciphertext)
deciphered = decipher(ciphertext,hint)
print("Deciphered Message: ",deciphered)



